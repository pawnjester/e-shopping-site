package co.loystar.loystarbusiness.models.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBSUBSCRIPTION".
*/
public class DBSubscriptionDao extends AbstractDao<DBSubscription, Long> {

    public static final String TABLENAME = "DBSUBSCRIPTION";

    /**
     * Properties of entity DBSubscription.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Plan_name = new Property(1, String.class, "plan_name", false, "PLAN_NAME");
        public final static Property Expires_on = new Property(2, java.util.Date.class, "expires_on", false, "EXPIRES_ON");
        public final static Property Created_at = new Property(3, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(4, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Pricing_plan_id = new Property(5, Long.class, "pricing_plan_id", false, "PRICING_PLAN_ID");
        public final static Property Mm_payment_token = new Property(6, String.class, "mm_payment_token", false, "MM_PAYMENT_TOKEN");
        public final static Property Mm_invoice_number = new Property(7, String.class, "mm_invoice_number", false, "MM_INVOICE_NUMBER");
        public final static Property Mm_payment_duration = new Property(8, Integer.class, "mm_payment_duration", false, "MM_PAYMENT_DURATION");
        public final static Property Merchant_id = new Property(9, Long.class, "merchant_id", false, "MERCHANT_ID");
    }


    public DBSubscriptionDao(DaoConfig config) {
        super(config);
    }
    
    public DBSubscriptionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBSUBSCRIPTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PLAN_NAME\" TEXT," + // 1: plan_name
                "\"EXPIRES_ON\" INTEGER," + // 2: expires_on
                "\"CREATED_AT\" INTEGER," + // 3: created_at
                "\"UPDATED_AT\" INTEGER," + // 4: updated_at
                "\"PRICING_PLAN_ID\" INTEGER," + // 5: pricing_plan_id
                "\"MM_PAYMENT_TOKEN\" TEXT," + // 6: mm_payment_token
                "\"MM_INVOICE_NUMBER\" TEXT," + // 7: mm_invoice_number
                "\"MM_PAYMENT_DURATION\" INTEGER," + // 8: mm_payment_duration
                "\"MERCHANT_ID\" INTEGER);"); // 9: merchant_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBSUBSCRIPTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBSubscription entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String plan_name = entity.getPlan_name();
        if (plan_name != null) {
            stmt.bindString(2, plan_name);
        }
 
        java.util.Date expires_on = entity.getExpires_on();
        if (expires_on != null) {
            stmt.bindLong(3, expires_on.getTime());
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(4, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(5, updated_at.getTime());
        }
 
        Long pricing_plan_id = entity.getPricing_plan_id();
        if (pricing_plan_id != null) {
            stmt.bindLong(6, pricing_plan_id);
        }
 
        String mm_payment_token = entity.getMm_payment_token();
        if (mm_payment_token != null) {
            stmt.bindString(7, mm_payment_token);
        }
 
        String mm_invoice_number = entity.getMm_invoice_number();
        if (mm_invoice_number != null) {
            stmt.bindString(8, mm_invoice_number);
        }
 
        Integer mm_payment_duration = entity.getMm_payment_duration();
        if (mm_payment_duration != null) {
            stmt.bindLong(9, mm_payment_duration);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(10, merchant_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBSubscription entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String plan_name = entity.getPlan_name();
        if (plan_name != null) {
            stmt.bindString(2, plan_name);
        }
 
        java.util.Date expires_on = entity.getExpires_on();
        if (expires_on != null) {
            stmt.bindLong(3, expires_on.getTime());
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(4, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(5, updated_at.getTime());
        }
 
        Long pricing_plan_id = entity.getPricing_plan_id();
        if (pricing_plan_id != null) {
            stmt.bindLong(6, pricing_plan_id);
        }
 
        String mm_payment_token = entity.getMm_payment_token();
        if (mm_payment_token != null) {
            stmt.bindString(7, mm_payment_token);
        }
 
        String mm_invoice_number = entity.getMm_invoice_number();
        if (mm_invoice_number != null) {
            stmt.bindString(8, mm_invoice_number);
        }
 
        Integer mm_payment_duration = entity.getMm_payment_duration();
        if (mm_payment_duration != null) {
            stmt.bindLong(9, mm_payment_duration);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(10, merchant_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBSubscription readEntity(Cursor cursor, int offset) {
        DBSubscription entity = new DBSubscription( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // plan_name
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // expires_on
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // created_at
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // updated_at
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // pricing_plan_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mm_payment_token
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mm_invoice_number
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // mm_payment_duration
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // merchant_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBSubscription entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlan_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExpires_on(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setCreated_at(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUpdated_at(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setPricing_plan_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMm_payment_token(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMm_invoice_number(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMm_payment_duration(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMerchant_id(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBSubscription entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBSubscription entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBSubscription entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
