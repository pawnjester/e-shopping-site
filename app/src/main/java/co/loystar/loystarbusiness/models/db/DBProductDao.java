package co.loystar.loystarbusiness.models.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBPRODUCT".
*/
public class DBProductDao extends AbstractDao<DBProduct, Long> {

    public static final String TABLENAME = "DBPRODUCT";

    /**
     * Properties of entity DBProduct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Created_at = new Property(1, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(2, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Price = new Property(3, Double.class, "price", false, "PRICE");
        public final static Property Merchant_id = new Property(4, Long.class, "merchant_id", false, "MERCHANT_ID");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Picture = new Property(6, String.class, "picture", false, "PICTURE");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property Deleted = new Property(8, Boolean.class, "deleted", false, "DELETED");
        public final static Property Merchant_product_category_id = new Property(9, Long.class, "merchant_product_category_id", false, "MERCHANT_PRODUCT_CATEGORY_ID");
    }


    public DBProductDao(DaoConfig config) {
        super(config);
    }
    
    public DBProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBPRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CREATED_AT\" INTEGER," + // 1: created_at
                "\"UPDATED_AT\" INTEGER," + // 2: updated_at
                "\"PRICE\" REAL," + // 3: price
                "\"MERCHANT_ID\" INTEGER," + // 4: merchant_id
                "\"NAME\" TEXT," + // 5: name
                "\"PICTURE\" TEXT," + // 6: picture
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"DELETED\" INTEGER," + // 8: deleted
                "\"MERCHANT_PRODUCT_CATEGORY_ID\" INTEGER);"); // 9: merchant_product_category_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBPRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBProduct entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(2, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(3, updated_at.getTime());
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(4, price);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(5, merchant_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(7, picture);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(9, deleted ? 1L: 0L);
        }
 
        Long merchant_product_category_id = entity.getMerchant_product_category_id();
        if (merchant_product_category_id != null) {
            stmt.bindLong(10, merchant_product_category_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBProduct entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(2, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(3, updated_at.getTime());
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(4, price);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(5, merchant_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(7, picture);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(9, deleted ? 1L: 0L);
        }
 
        Long merchant_product_category_id = entity.getMerchant_product_category_id();
        if (merchant_product_category_id != null) {
            stmt.bindLong(10, merchant_product_category_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBProduct readEntity(Cursor cursor, int offset) {
        DBProduct entity = new DBProduct( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // created_at
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // updated_at
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // price
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // merchant_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // picture
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // deleted
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // merchant_product_category_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBProduct entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreated_at(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUpdated_at(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setPrice(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setMerchant_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPicture(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeleted(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setMerchant_product_category_id(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBProduct entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBProduct entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBProduct entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
