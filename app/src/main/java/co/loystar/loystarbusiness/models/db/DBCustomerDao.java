package co.loystar.loystarbusiness.models.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBCUSTOMER".
*/
public class DBCustomerDao extends AbstractDao<DBCustomer, Long> {

    public static final String TABLENAME = "DBCUSTOMER";

    /**
     * Properties of entity DBCustomer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, Long.class, "user_id", false, "USER_ID");
        public final static Property First_name = new Property(2, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Last_name = new Property(3, String.class, "last_name", false, "LAST_NAME");
        public final static Property Phone_number = new Property(4, String.class, "phone_number", false, "PHONE_NUMBER");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Date_of_birth = new Property(6, java.util.Date.class, "date_of_birth", false, "DATE_OF_BIRTH");
        public final static Property Synced = new Property(7, Integer.class, "synced", false, "SYNCED");
        public final static Property Deleted = new Property(8, Boolean.class, "deleted", false, "DELETED");
        public final static Property Created_at = new Property(9, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(10, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Local_db_created_at = new Property(11, java.util.Date.class, "local_db_created_at", false, "LOCAL_DB_CREATED_AT");
        public final static Property Local_db_updated_at = new Property(12, java.util.Date.class, "local_db_updated_at", false, "LOCAL_DB_UPDATED_AT");
        public final static Property Update_required = new Property(13, Boolean.class, "update_required", false, "UPDATE_REQUIRED");
        public final static Property Token = new Property(14, String.class, "token", false, "TOKEN");
        public final static Property Sex = new Property(15, String.class, "sex", false, "SEX");
        public final static Property Merchant_id = new Property(16, Long.class, "merchant_id", false, "MERCHANT_ID");
    }


    public DBCustomerDao(DaoConfig config) {
        super(config);
    }
    
    public DBCustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBCUSTOMER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: user_id
                "\"FIRST_NAME\" TEXT," + // 2: first_name
                "\"LAST_NAME\" TEXT," + // 3: last_name
                "\"PHONE_NUMBER\" TEXT," + // 4: phone_number
                "\"EMAIL\" TEXT," + // 5: email
                "\"DATE_OF_BIRTH\" INTEGER," + // 6: date_of_birth
                "\"SYNCED\" INTEGER," + // 7: synced
                "\"DELETED\" INTEGER," + // 8: deleted
                "\"CREATED_AT\" INTEGER," + // 9: created_at
                "\"UPDATED_AT\" INTEGER," + // 10: updated_at
                "\"LOCAL_DB_CREATED_AT\" INTEGER," + // 11: local_db_created_at
                "\"LOCAL_DB_UPDATED_AT\" INTEGER," + // 12: local_db_updated_at
                "\"UPDATE_REQUIRED\" INTEGER," + // 13: update_required
                "\"TOKEN\" TEXT," + // 14: token
                "\"SEX\" TEXT," + // 15: sex
                "\"MERCHANT_ID\" INTEGER);"); // 16: merchant_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBCUSTOMER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBCustomer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(3, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(4, last_name);
        }
 
        String phone_number = entity.getPhone_number();
        if (phone_number != null) {
            stmt.bindString(5, phone_number);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        java.util.Date date_of_birth = entity.getDate_of_birth();
        if (date_of_birth != null) {
            stmt.bindLong(7, date_of_birth.getTime());
        }
 
        Integer synced = entity.getSynced();
        if (synced != null) {
            stmt.bindLong(8, synced);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(9, deleted ? 1L: 0L);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(10, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(11, updated_at.getTime());
        }
 
        java.util.Date local_db_created_at = entity.getLocal_db_created_at();
        if (local_db_created_at != null) {
            stmt.bindLong(12, local_db_created_at.getTime());
        }
 
        java.util.Date local_db_updated_at = entity.getLocal_db_updated_at();
        if (local_db_updated_at != null) {
            stmt.bindLong(13, local_db_updated_at.getTime());
        }
 
        Boolean update_required = entity.getUpdate_required();
        if (update_required != null) {
            stmt.bindLong(14, update_required ? 1L: 0L);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(15, token);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(16, sex);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(17, merchant_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBCustomer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(3, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(4, last_name);
        }
 
        String phone_number = entity.getPhone_number();
        if (phone_number != null) {
            stmt.bindString(5, phone_number);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        java.util.Date date_of_birth = entity.getDate_of_birth();
        if (date_of_birth != null) {
            stmt.bindLong(7, date_of_birth.getTime());
        }
 
        Integer synced = entity.getSynced();
        if (synced != null) {
            stmt.bindLong(8, synced);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(9, deleted ? 1L: 0L);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(10, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(11, updated_at.getTime());
        }
 
        java.util.Date local_db_created_at = entity.getLocal_db_created_at();
        if (local_db_created_at != null) {
            stmt.bindLong(12, local_db_created_at.getTime());
        }
 
        java.util.Date local_db_updated_at = entity.getLocal_db_updated_at();
        if (local_db_updated_at != null) {
            stmt.bindLong(13, local_db_updated_at.getTime());
        }
 
        Boolean update_required = entity.getUpdate_required();
        if (update_required != null) {
            stmt.bindLong(14, update_required ? 1L: 0L);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(15, token);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(16, sex);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(17, merchant_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBCustomer readEntity(Cursor cursor, int offset) {
        DBCustomer entity = new DBCustomer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // first_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // last_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone_number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // date_of_birth
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // synced
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // deleted
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // created_at
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // updated_at
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // local_db_created_at
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // local_db_updated_at
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // update_required
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // token
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // sex
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // merchant_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBCustomer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFirst_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLast_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone_number(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate_of_birth(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSynced(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDeleted(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setCreated_at(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setUpdated_at(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setLocal_db_created_at(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setLocal_db_updated_at(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setUpdate_required(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setToken(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSex(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMerchant_id(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBCustomer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBCustomer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBCustomer entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
