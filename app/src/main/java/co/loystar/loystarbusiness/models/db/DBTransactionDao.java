package co.loystar.loystarbusiness.models.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBTRANSACTION".
*/
public class DBTransactionDao extends AbstractDao<DBTransaction, Long> {

    public static final String TABLENAME = "DBTRANSACTION";

    /**
     * Properties of entity DBTransaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, Long.class, "user_id", false, "USER_ID");
        public final static Property Product_id = new Property(2, Long.class, "product_id", false, "PRODUCT_ID");
        public final static Property Merchant_loyalty_program_id = new Property(3, Long.class, "merchant_loyalty_program_id", false, "MERCHANT_LOYALTY_PROGRAM_ID");
        public final static Property Auth_token = new Property(4, String.class, "auth_token", false, "AUTH_TOKEN");
        public final static Property Amount = new Property(5, Integer.class, "amount", false, "AMOUNT");
        public final static Property Points = new Property(6, Integer.class, "points", false, "POINTS");
        public final static Property Stamps = new Property(7, Integer.class, "stamps", false, "STAMPS");
        public final static Property Synced = new Property(8, Boolean.class, "synced", false, "SYNCED");
        public final static Property Created_at = new Property(9, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(10, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Program_type = new Property(11, String.class, "program_type", false, "PROGRAM_TYPE");
        public final static Property Notes = new Property(12, String.class, "notes", false, "NOTES");
        public final static Property Local_db_created_at = new Property(13, java.util.Date.class, "local_db_created_at", false, "LOCAL_DB_CREATED_AT");
        public final static Property Deleted = new Property(14, Integer.class, "deleted", false, "DELETED");
        public final static Property Merchant_id = new Property(15, Long.class, "merchant_id", false, "MERCHANT_ID");
        public final static Property Send_sms = new Property(16, Boolean.class, "send_sms", false, "SEND_SMS");
    }


    public DBTransactionDao(DaoConfig config) {
        super(config);
    }
    
    public DBTransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBTRANSACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: user_id
                "\"PRODUCT_ID\" INTEGER," + // 2: product_id
                "\"MERCHANT_LOYALTY_PROGRAM_ID\" INTEGER," + // 3: merchant_loyalty_program_id
                "\"AUTH_TOKEN\" TEXT," + // 4: auth_token
                "\"AMOUNT\" INTEGER," + // 5: amount
                "\"POINTS\" INTEGER," + // 6: points
                "\"STAMPS\" INTEGER," + // 7: stamps
                "\"SYNCED\" INTEGER," + // 8: synced
                "\"CREATED_AT\" INTEGER," + // 9: created_at
                "\"UPDATED_AT\" INTEGER," + // 10: updated_at
                "\"PROGRAM_TYPE\" TEXT," + // 11: program_type
                "\"NOTES\" TEXT," + // 12: notes
                "\"LOCAL_DB_CREATED_AT\" INTEGER," + // 13: local_db_created_at
                "\"DELETED\" INTEGER," + // 14: deleted
                "\"MERCHANT_ID\" INTEGER," + // 15: merchant_id
                "\"SEND_SMS\" INTEGER);"); // 16: send_sms
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBTRANSACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBTransaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(3, product_id);
        }
 
        Long merchant_loyalty_program_id = entity.getMerchant_loyalty_program_id();
        if (merchant_loyalty_program_id != null) {
            stmt.bindLong(4, merchant_loyalty_program_id);
        }
 
        String auth_token = entity.getAuth_token();
        if (auth_token != null) {
            stmt.bindString(5, auth_token);
        }
 
        Integer amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(6, amount);
        }
 
        Integer points = entity.getPoints();
        if (points != null) {
            stmt.bindLong(7, points);
        }
 
        Integer stamps = entity.getStamps();
        if (stamps != null) {
            stmt.bindLong(8, stamps);
        }
 
        Boolean synced = entity.getSynced();
        if (synced != null) {
            stmt.bindLong(9, synced ? 1L: 0L);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(10, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(11, updated_at.getTime());
        }
 
        String program_type = entity.getProgram_type();
        if (program_type != null) {
            stmt.bindString(12, program_type);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(13, notes);
        }
 
        java.util.Date local_db_created_at = entity.getLocal_db_created_at();
        if (local_db_created_at != null) {
            stmt.bindLong(14, local_db_created_at.getTime());
        }
 
        Integer deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(15, deleted);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(16, merchant_id);
        }
 
        Boolean send_sms = entity.getSend_sms();
        if (send_sms != null) {
            stmt.bindLong(17, send_sms ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBTransaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(3, product_id);
        }
 
        Long merchant_loyalty_program_id = entity.getMerchant_loyalty_program_id();
        if (merchant_loyalty_program_id != null) {
            stmt.bindLong(4, merchant_loyalty_program_id);
        }
 
        String auth_token = entity.getAuth_token();
        if (auth_token != null) {
            stmt.bindString(5, auth_token);
        }
 
        Integer amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(6, amount);
        }
 
        Integer points = entity.getPoints();
        if (points != null) {
            stmt.bindLong(7, points);
        }
 
        Integer stamps = entity.getStamps();
        if (stamps != null) {
            stmt.bindLong(8, stamps);
        }
 
        Boolean synced = entity.getSynced();
        if (synced != null) {
            stmt.bindLong(9, synced ? 1L: 0L);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(10, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(11, updated_at.getTime());
        }
 
        String program_type = entity.getProgram_type();
        if (program_type != null) {
            stmt.bindString(12, program_type);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(13, notes);
        }
 
        java.util.Date local_db_created_at = entity.getLocal_db_created_at();
        if (local_db_created_at != null) {
            stmt.bindLong(14, local_db_created_at.getTime());
        }
 
        Integer deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(15, deleted);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(16, merchant_id);
        }
 
        Boolean send_sms = entity.getSend_sms();
        if (send_sms != null) {
            stmt.bindLong(17, send_sms ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBTransaction readEntity(Cursor cursor, int offset) {
        DBTransaction entity = new DBTransaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // product_id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // merchant_loyalty_program_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // auth_token
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // amount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // points
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // stamps
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // synced
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // created_at
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // updated_at
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // program_type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // notes
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // local_db_created_at
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // deleted
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // merchant_id
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0 // send_sms
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBTransaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProduct_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMerchant_loyalty_program_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setAuth_token(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAmount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPoints(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStamps(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSynced(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setCreated_at(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setUpdated_at(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setProgram_type(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNotes(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLocal_db_created_at(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setDeleted(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setMerchant_id(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setSend_sms(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBTransaction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBTransaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBTransaction entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
