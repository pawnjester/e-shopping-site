package co.loystar.loystarbusiness.models.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBMERCHANT_LOYALTY_PROGRAM".
*/
public class DBMerchantLoyaltyProgramDao extends AbstractDao<DBMerchantLoyaltyProgram, Long> {

    public static final String TABLENAME = "DBMERCHANT_LOYALTY_PROGRAM";

    /**
     * Properties of entity DBMerchantLoyaltyProgram.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Threshold = new Property(1, Integer.class, "threshold", false, "THRESHOLD");
        public final static Property Reward = new Property(2, String.class, "reward", false, "REWARD");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Created_at = new Property(4, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(5, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Program_type = new Property(6, String.class, "program_type", false, "PROGRAM_TYPE");
        public final static Property Merchant_id = new Property(7, Long.class, "merchant_id", false, "MERCHANT_ID");
        public final static Property Deleted = new Property(8, Boolean.class, "deleted", false, "DELETED");
        public final static Property Sms_template = new Property(9, String.class, "sms_template", false, "SMS_TEMPLATE");
    }


    public DBMerchantLoyaltyProgramDao(DaoConfig config) {
        super(config);
    }
    
    public DBMerchantLoyaltyProgramDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBMERCHANT_LOYALTY_PROGRAM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"THRESHOLD\" INTEGER," + // 1: threshold
                "\"REWARD\" TEXT," + // 2: reward
                "\"NAME\" TEXT," + // 3: name
                "\"CREATED_AT\" INTEGER," + // 4: created_at
                "\"UPDATED_AT\" INTEGER," + // 5: updated_at
                "\"PROGRAM_TYPE\" TEXT," + // 6: program_type
                "\"MERCHANT_ID\" INTEGER," + // 7: merchant_id
                "\"DELETED\" INTEGER," + // 8: deleted
                "\"SMS_TEMPLATE\" TEXT);"); // 9: sms_template
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBMERCHANT_LOYALTY_PROGRAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBMerchantLoyaltyProgram entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer threshold = entity.getThreshold();
        if (threshold != null) {
            stmt.bindLong(2, threshold);
        }
 
        String reward = entity.getReward();
        if (reward != null) {
            stmt.bindString(3, reward);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(5, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(6, updated_at.getTime());
        }
 
        String program_type = entity.getProgram_type();
        if (program_type != null) {
            stmt.bindString(7, program_type);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(8, merchant_id);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(9, deleted ? 1L: 0L);
        }
 
        String sms_template = entity.getSms_template();
        if (sms_template != null) {
            stmt.bindString(10, sms_template);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBMerchantLoyaltyProgram entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer threshold = entity.getThreshold();
        if (threshold != null) {
            stmt.bindLong(2, threshold);
        }
 
        String reward = entity.getReward();
        if (reward != null) {
            stmt.bindString(3, reward);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(5, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(6, updated_at.getTime());
        }
 
        String program_type = entity.getProgram_type();
        if (program_type != null) {
            stmt.bindString(7, program_type);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(8, merchant_id);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(9, deleted ? 1L: 0L);
        }
 
        String sms_template = entity.getSms_template();
        if (sms_template != null) {
            stmt.bindString(10, sms_template);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBMerchantLoyaltyProgram readEntity(Cursor cursor, int offset) {
        DBMerchantLoyaltyProgram entity = new DBMerchantLoyaltyProgram( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // threshold
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // reward
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // created_at
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // updated_at
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // program_type
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // merchant_id
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // deleted
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // sms_template
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBMerchantLoyaltyProgram entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setThreshold(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setReward(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreated_at(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUpdated_at(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setProgram_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMerchant_id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setDeleted(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setSms_template(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBMerchantLoyaltyProgram entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBMerchantLoyaltyProgram entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBMerchantLoyaltyProgram entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
