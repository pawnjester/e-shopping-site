package co.loystar.loystarbusiness.models.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBCONFIG".
*/
public class DBConfigDao extends AbstractDao<DBConfig, Void> {

    public static final String TABLENAME = "DBCONFIG";

    /**
     * Properties of entity DBConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Merchant_id = new Property(0, Long.class, "merchant_id", false, "MERCHANT_ID");
        public final static Property Dbs_migrated_to_single_db = new Property(1, Boolean.class, "dbs_migrated_to_single_db", false, "DBS_MIGRATED_TO_SINGLE_DB");
    }


    public DBConfigDao(DaoConfig config) {
        super(config);
    }
    
    public DBConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBCONFIG\" (" + //
                "\"MERCHANT_ID\" INTEGER," + // 0: merchant_id
                "\"DBS_MIGRATED_TO_SINGLE_DB\" INTEGER);"); // 1: dbs_migrated_to_single_db
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBCONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBConfig entity) {
        stmt.clearBindings();
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(1, merchant_id);
        }
 
        Boolean dbs_migrated_to_single_db = entity.getDbs_migrated_to_single_db();
        if (dbs_migrated_to_single_db != null) {
            stmt.bindLong(2, dbs_migrated_to_single_db ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBConfig entity) {
        stmt.clearBindings();
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(1, merchant_id);
        }
 
        Boolean dbs_migrated_to_single_db = entity.getDbs_migrated_to_single_db();
        if (dbs_migrated_to_single_db != null) {
            stmt.bindLong(2, dbs_migrated_to_single_db ? 1L: 0L);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DBConfig readEntity(Cursor cursor, int offset) {
        DBConfig entity = new DBConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // merchant_id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0 // dbs_migrated_to_single_db
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBConfig entity, int offset) {
        entity.setMerchant_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDbs_migrated_to_single_db(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DBConfig entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DBConfig entity) {
        return null;
    }

    @Override
    public boolean hasKey(DBConfig entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
