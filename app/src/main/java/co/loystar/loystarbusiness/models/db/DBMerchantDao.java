package co.loystar.loystarbusiness.models.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBMERCHANT".
*/
public class DBMerchantDao extends AbstractDao<DBMerchant, Long> {

    public static final String TABLENAME = "DBMERCHANT";

    /**
     * Properties of entity DBMerchant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property First_name = new Property(2, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Last_name = new Property(3, String.class, "last_name", false, "LAST_NAME");
        public final static Property Address_line1 = new Property(4, String.class, "address_line1", false, "ADDRESS_LINE1");
        public final static Property Address_line2 = new Property(5, String.class, "address_line2", false, "ADDRESS_LINE2");
        public final static Property Contact_number = new Property(6, String.class, "contact_number", false, "CONTACT_NUMBER");
        public final static Property Business_name = new Property(7, String.class, "business_name", false, "BUSINESS_NAME");
        public final static Property Business_type = new Property(8, String.class, "business_type", false, "BUSINESS_TYPE");
        public final static Property Currency = new Property(9, String.class, "currency", false, "CURRENCY");
        public final static Property Created_at = new Property(10, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(11, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Subscription_expires_on = new Property(12, java.util.Date.class, "subscription_expires_on", false, "SUBSCRIPTION_EXPIRES_ON");
        public final static Property Subscription_plan = new Property(13, String.class, "subscription_plan", false, "SUBSCRIPTION_PLAN");
        public final static Property Turn_on_point_of_sale = new Property(14, Boolean.class, "turn_on_point_of_sale", false, "TURN_ON_POINT_OF_SALE");
        public final static Property Update_required = new Property(15, Boolean.class, "update_required", false, "UPDATE_REQUIRED");
    }


    public DBMerchantDao(DaoConfig config) {
        super(config);
    }
    
    public DBMerchantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBMERCHANT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"EMAIL\" TEXT," + // 1: email
                "\"FIRST_NAME\" TEXT," + // 2: first_name
                "\"LAST_NAME\" TEXT," + // 3: last_name
                "\"ADDRESS_LINE1\" TEXT," + // 4: address_line1
                "\"ADDRESS_LINE2\" TEXT," + // 5: address_line2
                "\"CONTACT_NUMBER\" TEXT," + // 6: contact_number
                "\"BUSINESS_NAME\" TEXT," + // 7: business_name
                "\"BUSINESS_TYPE\" TEXT," + // 8: business_type
                "\"CURRENCY\" TEXT," + // 9: currency
                "\"CREATED_AT\" INTEGER," + // 10: created_at
                "\"UPDATED_AT\" INTEGER," + // 11: updated_at
                "\"SUBSCRIPTION_EXPIRES_ON\" INTEGER," + // 12: subscription_expires_on
                "\"SUBSCRIPTION_PLAN\" TEXT," + // 13: subscription_plan
                "\"TURN_ON_POINT_OF_SALE\" INTEGER," + // 14: turn_on_point_of_sale
                "\"UPDATE_REQUIRED\" INTEGER);"); // 15: update_required
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBMERCHANT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBMerchant entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(3, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(4, last_name);
        }
 
        String address_line1 = entity.getAddress_line1();
        if (address_line1 != null) {
            stmt.bindString(5, address_line1);
        }
 
        String address_line2 = entity.getAddress_line2();
        if (address_line2 != null) {
            stmt.bindString(6, address_line2);
        }
 
        String contact_number = entity.getContact_number();
        if (contact_number != null) {
            stmt.bindString(7, contact_number);
        }
 
        String business_name = entity.getBusiness_name();
        if (business_name != null) {
            stmt.bindString(8, business_name);
        }
 
        String business_type = entity.getBusiness_type();
        if (business_type != null) {
            stmt.bindString(9, business_type);
        }
 
        String currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindString(10, currency);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(11, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(12, updated_at.getTime());
        }
 
        java.util.Date subscription_expires_on = entity.getSubscription_expires_on();
        if (subscription_expires_on != null) {
            stmt.bindLong(13, subscription_expires_on.getTime());
        }
 
        String subscription_plan = entity.getSubscription_plan();
        if (subscription_plan != null) {
            stmt.bindString(14, subscription_plan);
        }
 
        Boolean turn_on_point_of_sale = entity.getTurn_on_point_of_sale();
        if (turn_on_point_of_sale != null) {
            stmt.bindLong(15, turn_on_point_of_sale ? 1L: 0L);
        }
 
        Boolean update_required = entity.getUpdate_required();
        if (update_required != null) {
            stmt.bindLong(16, update_required ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBMerchant entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(3, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(4, last_name);
        }
 
        String address_line1 = entity.getAddress_line1();
        if (address_line1 != null) {
            stmt.bindString(5, address_line1);
        }
 
        String address_line2 = entity.getAddress_line2();
        if (address_line2 != null) {
            stmt.bindString(6, address_line2);
        }
 
        String contact_number = entity.getContact_number();
        if (contact_number != null) {
            stmt.bindString(7, contact_number);
        }
 
        String business_name = entity.getBusiness_name();
        if (business_name != null) {
            stmt.bindString(8, business_name);
        }
 
        String business_type = entity.getBusiness_type();
        if (business_type != null) {
            stmt.bindString(9, business_type);
        }
 
        String currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindString(10, currency);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(11, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(12, updated_at.getTime());
        }
 
        java.util.Date subscription_expires_on = entity.getSubscription_expires_on();
        if (subscription_expires_on != null) {
            stmt.bindLong(13, subscription_expires_on.getTime());
        }
 
        String subscription_plan = entity.getSubscription_plan();
        if (subscription_plan != null) {
            stmt.bindString(14, subscription_plan);
        }
 
        Boolean turn_on_point_of_sale = entity.getTurn_on_point_of_sale();
        if (turn_on_point_of_sale != null) {
            stmt.bindLong(15, turn_on_point_of_sale ? 1L: 0L);
        }
 
        Boolean update_required = entity.getUpdate_required();
        if (update_required != null) {
            stmt.bindLong(16, update_required ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBMerchant readEntity(Cursor cursor, int offset) {
        DBMerchant entity = new DBMerchant( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // first_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // last_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address_line1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address_line2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contact_number
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // business_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // business_type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // currency
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // created_at
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // updated_at
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // subscription_expires_on
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // subscription_plan
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // turn_on_point_of_sale
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0 // update_required
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBMerchant entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFirst_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLast_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress_line1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress_line2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContact_number(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBusiness_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBusiness_type(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCurrency(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreated_at(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setUpdated_at(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setSubscription_expires_on(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setSubscription_plan(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTurn_on_point_of_sale(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setUpdate_required(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBMerchant entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBMerchant entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBMerchant entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
